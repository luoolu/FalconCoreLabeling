name: New Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configurationJson: |
            {
                "template": "## What's Changed\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>\n\nIf you find this project useful, please consider [sponsoring](https://ko-fi.com/vietanhdev) its development.",
                "categories": [
                    {
                        "title": "## 🚀 Features",
                        "labels": ["feature"]
                    },
                    {
                        "title": "## 🐛 Fixes",
                        "labels": ["fix"]
                    },
                    {
                        "title": "## 💬 Other",
                        "labels": ["other"]
                    }
                ]
            }

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{steps.github_release.outputs.changelog}}
          draft: true
          prerelease: true

  build:
    needs: [release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        device: [CPU, GPU]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: "3.10.14"
        miniconda-version: "latest"

    - name: Set preferred device
      shell: bash -l {0}
      run: >-
        sed -i'' -e 's/\_\_preferred_device\_\_[ ]*=[ ]*\"[A-Za-z0-9]*\"/__preferred_device__ = "${{ matrix.device }}"/g' anylabeling/app_info.py

    - name: Install main
      shell: bash -l {0}
      run: |
        pip install .

    - name: Install PyQt5 for macOS
      shell: bash -l {0}
      run: |
        conda install -c conda-forge pyqt==5.15.7
      if: runner.os == 'macOS'

    - name: Run pyinstaller
      shell: bash -l {0}
      run: |
        pip install pyinstaller
        pyinstaller anylabeling.spec

    - name: Upload release executable on macOS & Linux
      id: upload_release_executable_macos_linux
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./dist/anylabeling
        asset_name: AnyLabeling-${{ runner.os }}${{ matrix.device == 'GPU' && '-GPU' || '' }}
        asset_content_type: application/octet-stream
      if: runner.os != 'Windows'

    - name: Upload release executable on Windows
      id: upload_release_executable_windows
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./dist/anylabeling.exe
        asset_name: AnyLabeling${{ matrix.device == 'GPU' && '-GPU' || '' }}.exe
        asset_content_type: application/octet-stream
      if: runner.os == 'Windows'

    - name: Create dmg for macOS
      run: |
        npm install -g create-dmg
        cd dist
        create-dmg AnyLabeling.app || test -f AnyLabeling\ 0.0.0.dmg
        mv AnyLabeling\ 0.0.0.dmg AnyLabeling${{ matrix.device == 'GPU' && '-GPU' || '' }}.dmg
      if: runner.os == 'macOS'

    - name: Upload release app on macOS
      id: upload_release_app_macos
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./dist/AnyLabeling${{ matrix.device == 'GPU' && '-GPU' || '' }}.dmg
        asset_name: AnyLabeling${{ matrix.device == 'GPU' && '-GPU' || '' }}.dmg
        asset_content_type: application/octet-stream
      if: runner.os == 'macOS'
